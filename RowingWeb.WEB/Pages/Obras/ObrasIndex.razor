@page "/obras"
@using Newtonsoft.Json
@using RowingWeb.WEB.Auth
@inject IRepository repository
@inject ILoginService loginService

@if (Obras is null)
{
    <div class="spinner"/>
}
else
{
    <div class="card">
        <div class="card-header">
            <span>
                <i class="oi oi-globe"></i> Obras
            </span>
        </div>
        <div class="card-body">
            <div class="mb-2" style="display: flex; flex-wrap:wrap; align-items: center;">
                <div>
                    <input style="width: 400px;" type="text" class="form-control" id="titulo" placeholder="Buscar Obra..." @bind-value="Filter" />
                </div>
                <div class="mx-1">
                    <button type="button" class="btn btn-outline-primary" @onclick="ApplyFilterAsync"><i class="oi oi-layers" /> Filtrar</button>
                    <button type="button" class="btn btn-outline-danger" @onclick="CleanFilterAsync"><i class="oi oi-ban" /> Limpiar</button>
                </div>
            </div>
        </div>
    </div>

    <Pagination CurrentPage="currentPage"
                TotalPages="totalPages"
                SelectedPage="SelectedPage" />

    <GenericList MyList="Obras">
        <Body>
            <table class="table table-striped-sm">
                <thead>
                    <tr>
                        <th>N°Obra</th>
                        <th>Nombre Obra</th>
                        <th>OP/N°Fuga</th>
                        <th>Estado</th>
                        <th>SubEstado</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var obra in Obras!)
                    {
                        <tr>
                            <td>
                                @obra.NroObra
                            </td>
                            <td>
                                @obra.NombreObra
                            </td>
                            <td>
                                @obra.ELEMPEP
                            </td>
                            <td>
                                @obra.CodigoEstado
                            </td>
                            <td>
                                @obra.CodigoSubEstado
                            </td>
                        </tr>
                    }
                </tbody>
            </table>
        </Body>
    </GenericList>
}

@code {
    public List<Obra>? Obras { get; set; }
    public Usuario? Usuario { get; set; }
    private int currentPage = 1;
    private int totalPages;

    [Parameter]
    [SupplyParameterFromQuery]
    public string Page { get; set; } = "";

    [Parameter]
    [SupplyParameterFromQuery]
    public string Filter { get; set; } = "";


    protected override async Task OnInitializedAsync()
    {
        await LoadAsync();
    }

    private async Task SelectedPage(int page)
    {
        currentPage = page;
        await LoadAsync(page);
    }

    private async Task LoadAsync(int page = 1)
    {

        string usertxt = await loginService.RecuperarValor("usuario");

        Usuario = JsonConvert.DeserializeObject<Usuario>(usertxt);

        if (!string.IsNullOrWhiteSpace(Page))
        {
            page = Convert.ToInt32(Page);
        }

        string url1 = string.Empty;
        string url2 = string.Empty;

        if (string.IsNullOrEmpty(Filter))
        {
            url1 = $"/api/Obras/GetObras/Rowing?page={page}";
            url2 = $"/api/Obras/totalPages/Rowing?page={page}";

        }
        else
        {
            url1 = $"/api/Obras/GetObras/Rowing?page={page}&filter={Filter}";
            url2 = $"/api/Obras/totalPages/Rowing?page={page}&filter={Filter}";
        }

        var responseHppt = await repository.Get<List<Obra>>(url1);
        var responseHppt2 = await repository.Get<int>(url2);
        Obras = responseHppt.Response!;
        totalPages = responseHppt2.Response!;
        var a = 1;
    }

    private async Task CleanFilterAsync()
    {
        Filter = string.Empty;
        await ApplyFilterAsync();
    }

    private async Task ApplyFilterAsync()
    {
        int page = 1;
        await LoadAsync(page);
        await SelectedPage(page);
    }

}
